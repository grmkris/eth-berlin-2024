/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../common";
import type {
  ERC20Rules,
  ERC20RulesInterface,
} from "../../../../contracts/identity/ERC20Rules.sol/ERC20Rules";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "countries",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "country2CountryRestrictions",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getC2CRestrictions",
    outputs: [
      {
        internalType: "uint16[]",
        name: "",
        type: "uint16[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getIdentifiers",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "identifiers",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "euint64",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "euint64",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "whitelistedWallets",
    outputs: [
      {
        internalType: "uint64",
        name: "",
        type: "uint64",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801562000010575f80fd5b5060408051608081018252600781830190815266636f756e74727960c81b6060830152815281518083019092526009825268189b1858dadb1a5cdd60ba1b6020838101919091528101919091526200006c905f906002620001ca565b50600160208181527fa16a496a05b845047bffe8ffb5ca4921e4d9b4ac7a0b6f59c78e5e5c3970ad5780546001600160401b03199081168417909155734cacef78615afecef7ef182cfbd243195fc90a295f527fc690b294eadfb991f591de2b83be697c98e91533553d9f1d905607319f3aea04805460029216821790556040805161333960f11b815280830183905281519081900360229081018220805460ff19908116909717905561757360f01b808352828501859052835192839003820183208054909716851790965593810191829052939052829162000190919083019081526040519081900360200181205460ff1690600290620001779061333960f11b815260020190565b9081526040519081900360200190205460ff16620001ad565b61ffff169052620001a690600390600162000225565b50620004dc565b5f620001c38262ffff00600886901b1662000343565b9392505050565b828054828255905f5260205f2090810192821562000213579160200282015b8281111562000213578251829062000202908262000410565b5091602001919060010190620001e9565b5062000221929150620002ce565b5090565b828054828255905f5260205f2090600f01601090048101928215620002c0579160200282015f5b838211156200028e57835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026200024c565b8015620002be5782816101000a81549061ffff02191690556002016020816001010492830192600103026200028e565b505b5062000221929150620002ee565b8082111562000221575f620002e4828262000304565b50600101620002ce565b5b8082111562000221575f8155600101620002ef565b508054620003129062000386565b5f825580601f1062000322575050565b601f0160209004905f5260205f2090810190620003409190620002ee565b50565b61ffff8181168382160190808211156200036b57634e487b7160e01b5f52601160045260245ffd5b5092915050565b634e487b7160e01b5f52604160045260245ffd5b600181811c908216806200039b57607f821691505b602082108103620003ba57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200040b57805f5260205f20601f840160051c81016020851015620003e75750805b601f840160051c820191505b8181101562000408575f8155600101620003f3565b50505b505050565b81516001600160401b038111156200042c576200042c62000372565b62000444816200043d845462000386565b84620003c0565b602080601f8311600181146200047a575f8415620004625750858301515b5f19600386901b1c1916600185901b178555620004d4565b5f85815260208120601f198616915b82811015620004aa5788860151825594840194600190910190840162000489565b5085821015620004c857878501515f19600388901b60f8161c191681555b505060018460011b0185555b505050505050565b6110e980620004ea5f395ff3fe608060405234801561000f575f80fd5b506004361061007a575f3560e01c8063a4770a8811610058578063a4770a88146100f8578063a80dcfee1461010d578063b40dce3f1461014f578063beabacc814610175575f80fd5b8063172ff9061461007e57806328f2d4da146100c3578063a0dbf007146100e3575b5f80fd5b6100ac61008c366004610e51565b805160208183018101805160028252928201919093012091525460ff1681565b60405160ff90911681526020015b60405180910390f35b6100d66100d1366004610efc565b610196565b6040516100ba9190610f56565b6100eb61023b565b6040516100ba9190610f68565b6101006102b8565b6040516100ba9190610faf565b61013661011b366004611027565b60016020525f908152604090205467ffffffffffffffff1681565b60405167ffffffffffffffff90911681526020016100ba565b61016261015d366004610efc565b61038b565b60405161ffff90911681526020016100ba565b610188610183366004611040565b6103c0565b6040519081526020016100ba565b5f81815481106101a4575f80fd5b905f5260205f20015f9150905080546101bc90611079565b80601f01602080910402602001604051908101604052809291908181526020018280546101e890611079565b80156102335780601f1061020a57610100808354040283529160200191610233565b820191905f5260205f20905b81548152906001019060200180831161021657829003601f168201915b505050505081565b606060038054806020026020016040519081016040528092919081815260200182805480156102ae57602002820191905f5260205f20905f905b82829054906101000a900461ffff1661ffff16815260200190600201906020826001010492830192600103820291508084116102755790505b5050505050905090565b60605f805480602002602001604051908101604052809291908181526020015f905b82821015610382578382905f5260205f200180546102f790611079565b80601f016020809104026020016040519081016040528092919081815260200182805461032390611079565b801561036e5780601f106103455761010080835404028352916020019161036e565b820191905f5260205f20905b81548152906001019060200180831161035157829003601f168201915b5050505050815260200190600101906102da565b50505050905090565b6003818154811061039a575f80fd5b905f5260205f209060109182820401919006600202915054906101000a900461ffff1681565b5f33816103cf82878787610426565b9050805f6103de84898961059a565b90506103ea82826106a9565b91505f6103f8858a8a6106bb565b905061040483826106a9565b925061041983886104145f6108bf565b6108d1565b9998505050505050505050565b6040805163095cf57b60e41b81526001600160a01b03858116600483015260248201929092526007604482015266636f756e74727960c81b60648201525f9182916104bc918816906395cf57b0906084015b602060405180830381865afa158015610493573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104b791906110b1565b6108e5565b6040805163095cf57b60e41b81526001600160a01b03878116600483015260248201929092526007604482015266636f756e74727960c81b60648201529192505f91610513918916906395cf57b090608401610478565b9050811515801561052357508015155b6105745760405162461bcd60e51b815260206004820152601560248201527f596f7520646f6e2774206861766520616363657373000000000000000000000060448201526064015b60405180910390fd5b5f61057f83836108f1565b90505f61058e8661271061091f565b90506104198282610947565b6040805163095cf57b60e41b81526001600160a01b03848116600483015260248201929092526009604482015268189b1858dadb1a5cdd60ba1b60648201525f918291610632918716906395cf57b0906084015b602060405180830381865afa158015610609573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061062d91906110b1565b610952565b6040805163095cf57b60e41b81526001600160a01b03868116600483015260248201929092526009604482015268189b1858dadb1a5cdd60ba1b60648201529192505f9161068b918816906395cf57b0906084016105ee565b905061069f61069a8284610947565b61095d565b9695505050505050565b5f6106b48383610967565b9392505050565b5f806106c561023b565b6040805163095cf57b60e41b81526001600160a01b03878116600483015260248201929092526007604482015266636f756e74727960c81b60648201529192505f91908716906395cf57b090608401602060405180830381865afa15801561072f573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061075391906110b1565b6040805163095cf57b60e41b81526001600160a01b03878116600483015260248201929092526007604482015266636f756e74727960c81b60648201529192505f91908816906395cf57b090608401602060405180830381865afa1580156107bd573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107e191906110b1565b905081151580156107f157508015155b61083d5760405162461bcd60e51b815260206004820152601560248201527f596f7520646f6e27742068617665206163636573730000000000000000000000604482015260640161056b565b5f61086261085461084d856109d9565b60086109e5565b61085d846109d9565b610a06565b90505f61086f6001610a11565b90505f5b85518110156108b2576108a8826108a385898581518110610896576108966110c8565b6020026020010151610a30565b6106a9565b9150600101610873565b5098975050505050505050565b5f6108cb826005610a52565b92915050565b5f6108dd848484610ac8565b949350505050565b5f6108cb826002610b13565b5f82610903576109005f610b4e565b92505b81610914576109115f610b4e565b91505b6106b483835f610b5a565b5f826109315761092e5f6108bf565b92505b6106b4838367ffffffffffffffff166001610bf0565b5f6106b48383610c42565b5f6108cb825f610c79565b5f6108cb82610ca1565b604051630ccd46b160e31b815260048101839052602481018290525f60448201819052908190605d9063666a3588906064015b602060405180830381865afa1580156109b5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108dd91906110b1565b5f6108cb826003610b13565b5f826109f7576109f45f610d02565b92505b6106b4838360ff166001610d0e565b5f6106b48383610d60565b5f8115610a22576108cb6001610d8e565b6108cb5f610d8e565b919050565b5f82610a4257610a3f5f610d02565b92505b6106b4838361ffff166001610d99565b604051631ce2e8d760e31b8152600481018390526001600160f81b031960f883901b1660248201525f90605d9063e71746b8906044015b602060405180830381865afa158015610aa4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106b491906110b1565b60405163cb3b940760e01b81526004810184905260248101839052604481018290525f90605d9063cb3b940790606401602060405180830381865afa1580156109b5573d5f803e3d5ffd5b60405163025f346960e51b8152600481018390526001600160f81b031960f883901b1660248201525f90605d90634be68d2090604401610a89565b5f6108cb826002610a52565b5f808215610b6d5750600160f81b610b70565b505f5b604051630d7c62eb60e31b815260048101869052602481018590526001600160f81b031982166044820152605d90636be31758906064015b602060405180830381865afa158015610bc3573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610be791906110b1565b95945050505050565b5f808215610c035750600160f81b610c06565b505f5b6040516334a6d7b960e11b815260048101869052602481018590526001600160f81b031982166044820152605d9063694daf7290606401610ba8565b604051633b1015f760e21b815260048101839052602481018290525f60448201819052908190605d9063ec4057dc9060640161099a565b5f82610c8b57610c885f6108bf565b92505b6106b4838367ffffffffffffffff166001610d99565b6040516309c00ffd60e11b8152600481018290525f90605d906313801ffa90602401602060405180830381865afa158015610cde573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108cb91906110b1565b5f6108cb826003610a52565b5f808215610d215750600160f81b610d24565b505f5b6040516389a4314b60e01b815260048101869052602481018590526001600160f81b031982166044820152605d906389a4314b90606401610ba8565b5f82610d7257610d6f5f610d02565b92505b81610d8357610d805f610d02565b91505b6106b483835f610deb565b5f6108cb825f610a52565b5f808215610dac5750600160f81b610daf565b505f5b604051631927108160e01b815260048101869052602481018590526001600160f81b031982166044820152605d90631927108190606401610ba8565b5f808215610dfe5750600160f81b610e01565b505f5b60405163f953e42760e01b815260048101869052602481018590526001600160f81b031982166044820152605d9063f953e42790606401610ba8565b634e487b7160e01b5f52604160045260245ffd5b5f60208284031215610e61575f80fd5b813567ffffffffffffffff80821115610e78575f80fd5b818401915084601f830112610e8b575f80fd5b813581811115610e9d57610e9d610e3d565b604051601f8201601f19908116603f01168101908382118183101715610ec557610ec5610e3d565b81604052828152876020848701011115610edd575f80fd5b826020860160208301375f928101602001929092525095945050505050565b5f60208284031215610f0c575f80fd5b5035919050565b5f81518084525f5b81811015610f3757602081850181015186830182015201610f1b565b505f602082860101526020601f19601f83011685010191505092915050565b602081525f6106b46020830184610f13565b602080825282518282018190525f9190848201906040850190845b81811015610fa357835161ffff1683529284019291840191600101610f83565b50909695505050505050565b5f60208083016020845280855180835260408601915060408160051b8701019250602087015f5b8281101561100457603f19888603018452610ff2858351610f13565b94509285019290850190600101610fd6565b5092979650505050505050565b80356001600160a01b0381168114610a2b575f80fd5b5f60208284031215611037575f80fd5b6106b482611011565b5f805f60608486031215611052575f80fd5b61105b84611011565b925061106960208501611011565b9150604084013590509250925092565b600181811c9082168061108d57607f821691505b6020821081036110ab57634e487b7160e01b5f52602260045260245ffd5b50919050565b5f602082840312156110c1575f80fd5b5051919050565b634e487b7160e01b5f52603260045260245ffdfea164736f6c6343000816000a";

type ERC20RulesConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20RulesConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Rules__factory extends ContractFactory {
  constructor(...args: ERC20RulesConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ERC20Rules & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ERC20Rules__factory {
    return super.connect(runner) as ERC20Rules__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20RulesInterface {
    return new Interface(_abi) as ERC20RulesInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ERC20Rules {
    return new Contract(address, _abi, runner) as unknown as ERC20Rules;
  }
}
