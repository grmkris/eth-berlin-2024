/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  ICompliantERC20,
  ICompliantERC20Interface,
} from "../../../../contracts/identity/ERC20Rules.sol/ICompliantERC20";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "wallet",
        type: "address",
      },
      {
        internalType: "string",
        name: "identifier",
        type: "string",
      },
    ],
    name: "getIdentifier",
    outputs: [
      {
        internalType: "euint64",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

export class ICompliantERC20__factory {
  static readonly abi = _abi;
  static createInterface(): ICompliantERC20Interface {
    return new Interface(_abi) as ICompliantERC20Interface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): ICompliantERC20 {
    return new Contract(address, _abi, runner) as unknown as ICompliantERC20;
  }
}
